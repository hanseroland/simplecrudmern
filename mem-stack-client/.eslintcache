[{"/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/index.js":"1","/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/App.js":"2","/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/reportWebVitals.js":"3","/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/components/PostMessages.js":"4","/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/actions/store.js":"5","/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/reducers/index.js":"6","/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/reducers/postMessage.js":"7","/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/actions/postMessage.js":"8","/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/actions/api.js":"9","/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/components/PostMessageForm.js":"10","/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/components/useForm.js":"11","/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/index.js":"12","/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/App.js":"13","/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/reportWebVitals.js":"14","/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/actions/store.js":"15","/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/components/PostMessages.js":"16","/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/actions/postMessage.js":"17","/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/components/PostMessageForm.js":"18","/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/actions/api.js":"19","/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/reducers/index.js":"20","/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/components/useForm.js":"21","/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/reducers/postMessage.js":"22"},{"size":500,"mtime":1609289611106,"results":"23","hashOfConfig":"24"},{"size":752,"mtime":1609419562268,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1609289611106,"results":"26","hashOfConfig":"24"},{"size":4060,"mtime":1609419433618,"results":"27","hashOfConfig":"24"},{"size":326,"mtime":1609419487783,"results":"28","hashOfConfig":"24"},{"size":147,"mtime":1609419387793,"results":"29","hashOfConfig":"24"},{"size":897,"mtime":1609419360445,"results":"30","hashOfConfig":"24"},{"size":1344,"mtime":1609419508355,"results":"31","hashOfConfig":"24"},{"size":455,"mtime":1609419527016,"results":"32","hashOfConfig":"24"},{"size":3504,"mtime":1609419933402,"results":"33","hashOfConfig":"24"},{"size":662,"mtime":1609419453254,"results":"34","hashOfConfig":"24"},{"size":500,"mtime":1609289611106,"results":"35","hashOfConfig":"36"},{"size":752,"mtime":1636691226036,"results":"37","hashOfConfig":"36"},{"size":362,"mtime":1609289611106,"results":"38","hashOfConfig":"36"},{"size":326,"mtime":1609419487783,"results":"39","hashOfConfig":"36"},{"size":4082,"mtime":1636691609068,"results":"40","hashOfConfig":"36"},{"size":1344,"mtime":1609419508355,"results":"41","hashOfConfig":"36"},{"size":3493,"mtime":1636691588076,"results":"42","hashOfConfig":"36"},{"size":455,"mtime":1609419527016,"results":"43","hashOfConfig":"36"},{"size":147,"mtime":1609419387793,"results":"44","hashOfConfig":"36"},{"size":662,"mtime":1609419453254,"results":"45","hashOfConfig":"36"},{"size":897,"mtime":1609419360445,"results":"46","hashOfConfig":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vmiph0",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"ozml8t",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"71"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"71"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"71"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"71"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/index.js",[],"/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/App.js",[],"/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/reportWebVitals.js",[],"/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/components/PostMessages.js",["96"],"/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/actions/store.js",[],"/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/reducers/index.js",[],"/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/reducers/postMessage.js",[],"/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/actions/postMessage.js",[],"/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/actions/api.js",["97"],"/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/components/PostMessageForm.js",["98","99"],"/home/nguema/ReactJs/site_web/reactmongoCrud/mem-stack-client/src/components/useForm.js",["100","101"],"/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/index.js",[],["102","103"],"/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/App.js",[],"/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/reportWebVitals.js",[],"/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/actions/store.js",[],"/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/components/PostMessages.js",["104"],"import React, { useEffect, useState, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/postMessage\";\nimport { Grid, Paper, withStyles, List, ListItem, ListItemText, Typography, Divider, Button } from \"@material-ui/core\";\nimport PostMessageForm from \"./PostMessageForm\";\nimport ButterToast, { Cinnamon } from \"butter-toast\";\nimport { DeleteSweep } from \"@material-ui/icons\";\n\nconst styles = theme => ({\n    paper: {\n        margin: theme.spacing(3),\n        padding: theme.spacing(2)\n    },\n    smMargin: {\n        margin: theme.spacing(1)\n    },\n    actionDiv: {\n        textAlign: \"center\"\n    }\n})\n\nconst PostMessages = ({ classes, ...props }) => {\n    //const {classes, ...props} = props\n    const [currentId, setCurrentId] = useState(0)\n\n    useEffect(() => {\n        props.fetchAllPostMessages()\n    }, [])//DidMount\n\n    const onDelete = id => {\n        const onSuccess = () => {\n            ButterToast.raise({\n                content: <Cinnamon.Crisp title=\"Box\"\n                    content=\"Suprresion avec succès\"\n                    scheme={Cinnamon.Crisp.SCHEME_PURPLE}\n                    icon={<DeleteSweep />}\n                />\n            })\n        }\n        if (window.confirm('Voulez vous vraiment supprimer cet enrégistrement ?'))\n            props.deletePostMessage(id,onSuccess)\n    }\n\n\n    return (\n        <Grid container>\n            <Grid item xs={5}>\n                <Paper className={classes.paper}>\n                    <PostMessageForm {...{ currentId, setCurrentId }} />\n                </Paper>\n            </Grid>\n            <Grid item xs={7}>\n                <Paper className={classes.paper}>\n                    <List>\n                        {\n                            props.postMessageList.map((record, index) => {\n                                return (\n                                    <Fragment key={index}>\n                                        <ListItem>\n                                            <ListItemText>\n                                                <Typography variant=\"h5\">\n                                                    {record.title}\n                                                </Typography>\n                                                <div>\n                                                    {record.message}\n                                                </div>\n                                                <div className={classes.actionDiv}>\n                                                    <Button variant=\"contained\" color=\"primary\" size=\"small\"\n                                                        className={classes.smMargin}\n                                                        onClick={() => setCurrentId(record._id)}>\n                                                        Modifier\n                                                    </Button>\n                                                    <Button variant=\"contained\" color=\"secondary\" size=\"small\"\n                                                        className={classes.smMargin}\n                                                        onClick={() => onDelete(record._id)}>\n                                                        Supprimer\n                                                    </Button>\n                                                </div>\n                                            </ListItemText>\n                                        </ListItem>\n                                        <Divider component=\"li\" />\n                                    </Fragment>\n                                )\n                            })\n                        }\n                    </List>\n                </Paper>\n            </Grid>\n        </Grid>\n    );\n}\n\nconst mapStateToProps = state => ({\n    postMessageList: state.postMessage.list\n})\n\nconst mapActionToProps = {\n    fetchAllPostMessages: actions.fetchAll,\n    deletePostMessage: actions.Delete\n}\n\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostMessages));\n","/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/actions/postMessage.js",[],"/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/components/PostMessageForm.js",["105","106"],"import React, { useEffect, useState } from \"react\";\nimport { TextField, withStyles, Button } from \"@material-ui/core\";\nimport useForm from \"./useForm\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/postMessage\";\nimport ButterToast, { Cinnamon } from \"butter-toast\";\nimport { AssignmentTurnedIn } from \"@material-ui/icons\";\n\nconst initialFieldValues = {\n    title: '',\n    message: ''\n}\n\nconst styles = theme => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1)\n        },\n    },\n    form: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center'\n    },\n    postBtn: {\n        width: \"50%\"\n    }\n})\n\nconst PostMessageForm = ({ classes, ...props }) => {\n\n    useEffect(() => {\n        if (props.currentId !== 0){\n            setValues({\n                ...props.postMessageList.find(x => x._id === props.currentId)\n            })\n            setErrors({})\n        }\n    }, [props.currentId])\n\n    const validate = () => {\n        let temp = { ...errors }\n        temp.title = values.title ? \"\" : \"Champ requis.\"\n        temp.message = values.message ? \"\" : \"TChamps requis.\"\n        setErrors({\n            ...temp\n        })\n        return Object.values(temp).every(x => x === \"\")\n    }\n\n    var {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFieldValues,props.setCurrentId)\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        const onSuccess = () => {\n            ButterToast.raise({\n                content: <Cinnamon.Crisp title=\"Box\"\n                    content=\"Enrégustrement avec succès\"\n                    scheme={Cinnamon.Crisp.SCHEME_PURPLE}\n                    icon={<AssignmentTurnedIn />}\n                />\n            })\n            resetForm()\n        }\n        if (validate()) {\n            if (props.currentId === 0)\n                props.createPostMessage(values, onSuccess)\n            else\n                props.updatePostMessage(props.currentId, values, onSuccess)\n        }\n    }\n\n    return (\n        <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`}\n            onSubmit={handleSubmit}>\n            <TextField\n                name=\"title\"\n                variant=\"outlined\"\n                label=\"Title\"\n                fullWidth\n                value={values.title}\n                onChange={handleInputChange}\n                {...(errors.title && { error: true, helperText: errors.title })}\n            />\n            <TextField\n                name=\"message\"\n                variant=\"outlined\"\n                label=\"Message\"\n                fullWidth\n                multiline\n                rows={4}\n                value={values.message}\n                onChange={handleInputChange}\n                {...(errors.message && { error: true, helperText: errors.message })}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                type=\"submit\"\n                className={classes.postBtn}\n            >Enrégistrer</Button>\n        </form>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    postMessageList: state.postMessage.list\n})\n\nconst mapActionToProps = {\n    createPostMessage: actions.create,\n    updatePostMessage: actions.update\n}\n\n\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostMessageForm));","/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/actions/api.js",["107"],"import axios from \"axios\";\n\nconst baseUrl = 'http://localhost:4000/'\n\nexport default {\n    postMessage(url = baseUrl + 'postmessages/') {\n        return {\n            fetchAll: () => axios.get(url),\n            fetchById: id => axios.get(url + id),\n            create: newRecord => axios.post(url, newRecord),\n            update: (id, updatedRecord) => axios.put(url + id, updatedRecord),\n            delete: id => axios.delete(url + id)\n        }\n    }\n}","/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/reducers/index.js",[],"/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/components/useForm.js",["108","109"],"import React, { useEffect, useState } from \"react\";\n\nconst useForm = (initialFieldValues,setCurrentId) => {\n\n    const [values, setValues] = useState(initialFieldValues)\n    const [errors, setErrors] = useState({})\n\n    const handleInputChange = e => {\n        const { name, value } = e.target\n        setValues({\n            ...values,\n            [name]: value\n        })\n    }\n\n    const resetForm =() =>{\n        setValues(initialFieldValues)\n        setErrors({})\n        setCurrentId(0)\n    }\n\n    return {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    };\n}\n\nexport default useForm;\n","/home/nguema/Documents/.HRP DEV/Github/reactmongoCrud/mem-stack-client/src/reducers/postMessage.js",[],{"ruleId":"110","severity":1,"message":"111","line":28,"column":8,"nodeType":"112","endLine":28,"endColumn":10,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":5,"column":1,"nodeType":"116","endLine":15,"endColumn":2},{"ruleId":"117","severity":1,"message":"118","line":1,"column":28,"nodeType":"119","messageId":"120","endLine":1,"endColumn":36},{"ruleId":"110","severity":1,"message":"121","line":39,"column":8,"nodeType":"112","endLine":39,"endColumn":25,"suggestions":"122"},{"ruleId":"117","severity":1,"message":"123","line":1,"column":8,"nodeType":"119","messageId":"120","endLine":1,"endColumn":13},{"ruleId":"117","severity":1,"message":"124","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"110","severity":1,"message":"111","line":28,"column":8,"nodeType":"112","endLine":28,"endColumn":10,"suggestions":"129"},{"ruleId":"117","severity":1,"message":"118","line":1,"column":28,"nodeType":"119","messageId":"120","endLine":1,"endColumn":36},{"ruleId":"110","severity":1,"message":"121","line":39,"column":8,"nodeType":"112","endLine":39,"endColumn":25,"suggestions":"130"},{"ruleId":"114","severity":1,"message":"115","line":5,"column":1,"nodeType":"116","endLine":15,"endColumn":2},{"ruleId":"117","severity":1,"message":"123","line":1,"column":8,"nodeType":"119","messageId":"120","endLine":1,"endColumn":13},{"ruleId":"117","severity":1,"message":"124","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["131"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'props.postMessageList', 'setErrors', and 'setValues'. Either include them or remove the dependency array.",["132"],"'React' is defined but never used.","'useEffect' is defined but never used.","no-native-reassign",["133"],"no-negated-in-lhs",["134"],["135"],["136"],{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},"no-global-assign","no-unsafe-negation",{"desc":"137","fix":"141"},{"desc":"139","fix":"142"},"Update the dependencies array to be: [props]",{"range":"143","text":"144"},"Update the dependencies array to be: [props.currentId, props.postMessageList, setErrors, setValues]",{"range":"145","text":"146"},{"range":"147","text":"144"},{"range":"148","text":"146"},[859,861],"[props]",[966,983],"[props.currentId, props.postMessageList, setErrors, setValues]",[859,861],[966,983]]